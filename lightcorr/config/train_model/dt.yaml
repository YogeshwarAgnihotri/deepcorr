#####################Dataset loading, splitting and generating settings#####################
load_pregenerated_dataset: True  # If true, load the dataset; otherwise, generate the dataset
pregenerated_dataset_path: "/home/yogeshwar/datasets/deepcorr_pregen/deepcorr_9008_2252"  # Path to the preprocessed dataset
#pregenerated_dataset_path: "/home/yagnihotri/datasets/deepcorr/deepcorr_pregen/deepcorr_9008_2252"  # Path to the preprocessed dataset

# Dataset generation settings
# ONLY USED IF load_pregenerated_dataset IS FALSE
base_dataset_path: "/home/yogeshwar/datasets/deepcorr_original"  # Path to the DeepCorr dataset
#base_dataset_path: "/home/yagnihotri/datasets/deepcorr_original"  # Path to the DeepCorr dataset

train_ratio: 0.8  # Training set ratio
flow_size: 300  # Flow sizes
negative_samples: 1  # Number of negative samples
load_all_data: False  # If true, load all data; otherwise, only load flows with minimum specified packets

# Load dataset fully into memory, if false keeps using memmap arrays
load_dataset_into_memory: False

######################################Run Settings###########################################
model_type: "decision_tree"  # "decision_tree" , "random_forest", "xgbClassifier"
run_folder_path: "/home/yogeshwar/master_thesis_corr/lightcorr"  # Path to the folder where the run folder will be created
#run_folder_path: "/home/yagnihotri/projects/corr/lightcorr"

hyperparameter_search_type: "none"  # Type of hyperparameter search ("none", "grid_search", "halving_grid_search" "random_search")
selected_hyperparameter_grid: "none"  # Name of the hyperparameter grid to use (see below)
# Selects which confinguration to use for single model training see below for details
single_model_training_config: "best" # select one from the single training config below. 

######################################Validation Settings######################################
validation_settings:
  run_validation: true # If true, run validation, otherwise skip validation
  roc_plot_enabled: true  # If true, generate ROC plot
  cross_validation:
    cv: 5  # Number of folds for cross-validation
    n_jobs: -1  # Number of jobs to run in parallel. -1 means using all processors
    verbose: 100  # Verbosity level for cross-validation

######################################Hyperparameter Settings#################################
hyperparameter_search_settings:
  grid_search:
    verbose: 100  # Verbosity level for hyperparameter search
    cv: 5  # Number of folds for cross-validation
    scoring: 'roc_auc_score'  # Scoring method for grid search. The higher the better
    refit: 'roc_auc_score'  # Scoring method for refitting the best model. The hyperparameter combination with the highest score will be used for the final refit
    error_score: 'raise'  # Default error handling
    return_train_score: False  # Default setting for returning train scores
    n_jobs: -1  # Default number of jobs to run in parallel

  halving_grid_search:
    verbose: 100  # Verbosity level for hyperparameter search
    cv: 5  # Number of folds for cross-validation
    factor: 3  # Reduction factor for the number of candidates to be kept
    resource: 'n_samples'  # Resource used to early stop the search. Can be either 'n_samples' or 'n_iterations'
    max_resources: 'auto'  # Maximum number of resources to be used
    aggressive_elimination: False  # If true, aggressively eliminate candidates
    scoring: 'roc_auc'  # Scoring method for grid search. The higher the better
    refit: 'roc_auc'  # Scoring method for refitting the best model. The hyperparameter combination with the highest score will be used for the final refit
    random_state: null  # Default random state
    #error_score: 'raise'  # Default error handling
    return_train_score: False  # Default setting for returning train scores
    n_jobs: -1  # Default number of jobs to run in parallel. -1 means all processors
  
  random_search:
    verbose: 100  # Verbosity level for hyperparameter search
    cv: 5  # Number of folds for cross-validation
    n_iter: 1000000  # Number of parameter settings sampled for random search
    # Default parameters for RandomizedSearchCV
    scoring: 'roc_auc_score'  # Scoring method for grid search. The higher the better
    refit: 'roc_auc_score'  # Scoring method for refitting the best model. The hyperparameter combination with the highest score will be used for the final refit
    pre_dispatch: '2*n_jobs'  # Default pre-dispatch configuration
    random_state: null  # Default random state
    error_score: 'raise'  # Default error handling
    return_train_score: False  # Default setting for returning train scores
    n_jobs: -1  # Default number of jobs to run in parallel. -1 means all processors

# Hyperparameter Grid (For use with grid or random search)
# structure:
#   model_type:
#     config_name:
#       hyperparameter_name: [hyperparameter_values]
#       ...
hyperparameter_grid:
  decision_tree:
    extensive:
      criterion: ["gini", "entropy"] 
      splitter: ["best", "random"] 
      max_depth: [null, 10, 20, 30, 40, 50, 60]
      min_samples_split: [2, 4, 6, 8, 10] 
      min_samples_leaf: [1, 2, 3, 4, 5]  
      max_features: [null, "sqrt", "log2", 0.5, 0.75, 1.0]  
      class_weight: [null, "balanced", {0: 1, 1: 2}, {0: 1, 1: 3}]  
      min_impurity_decrease: [0.0, 0.01, 0.02, 0.05] 
      ccp_alpha: [0.0, 0.01, 0.02, 0.05] 
    simple:
      criterion: ["gini", "entropy"] 
      max_depth: [null, 10, 20, 30] 
      min_samples_split: [2, 5, 10]  
      min_samples_leaf: [1, 2, 4]  

######################################Single Model Training Settings########################
# Single Model Training Settings (For training without hyperparameter search)
# structure: 
#   model_type: 
#     config_name: 
#       hyperparameter_name: hyperparameter_value
#       ...
single_model_training:
  decision_tree:
    default:
      criterion: "gini"  # Function to measure the quality of a split
      splitter: "best"  # Strategy to choose the split at each node
      max_depth: null  # Maximum depth of the tree
      min_samples_split: 2  # Minimum number of samples required to split an internal node
      min_samples_leaf: 1  # Minimum number of samples required to be at a leaf node
      min_weight_fraction_leaf: 0.0  # Minimum weighted fraction of the sum total of weights required at a leaf node
      max_features: null  # Number of features to consider for the best split
      random_state: null  # Controls the randomness of the estimator
      max_leaf_nodes: null  # Maximum number of leaf nodes
      min_impurity_decrease: 0.0  # A node will be split if the decrease in impurity is greater than this value
      class_weight: null  # Weights associated with classes
      ccp_alpha: 0.0  # Complexity parameter used for Minimal Cost-Complexity Pruning
    best:
      splitter: "best"
      min_samples_split: 10
      min_samples_leaf: 2
      min_impurity_decrease: 0.0
      max_features: 1.0
      max_depth: 60
      criterion: "entropy"
      class_weight: {0: 1, 1: 2}
      ccp_alpha: 0.0